public class HermesByteCode
{

    public static JavaScript.Function.HermesByteCode.global.JavaScript.FunctionOutput global(JavaScript.Object)
    {
        JavaScript.FunctionOutput r1, r6, r11;
        JavaScript.Environment.index_0.message r10;
        JavaScript.Exception Catch;
        JavaScript.Environment_this r0;
        JavaScript.String r3, r4, r5;
        Hbc.GlobalObject r2;
        Hbc.GlobalObject.console.error r8;
        Hbc.GlobalObject.console r7;
        JavaScript.Parameter_0 arg0;
        JavaScript.Object r15, r14, r13;
        JavaScript.Environment.index_0 r9;

        arg0 := @parameter0: JavaScript.Parameter_0;

        r0 = staticinvoke <Hbc.Opcode: JavaScript.Environment_this CreateEnvironment()>();

        r1 = staticinvoke <Hbc.Opcode: JavaScript.Undefined LoadConstUndefined()>();

        r2 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject GetGlobalObject()>();

        r3 = staticinvoke <Hbc.Opcode: JavaScript.String LoadConstString(JavaScript.String)>("outer");

        r4 = staticinvoke <Hbc.Opcode: JavaScript.String LoadConstString(JavaScript.String)>("finally");

        r5 = staticinvoke <Hbc.Opcode: JavaScript.String LoadConstString(JavaScript.String)>("oops");

        r6 = r1;

     label1:
        r1 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.Error hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r2, 1, "Error");

        r7 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.Error.prototype hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 2, "prototype");

        r8 = staticinvoke <Hbc.Opcode: JavaScript.CreateThis CreateThis(JavaScript.Object,JavaScript.Object)>(r7, r1);

        r15 = r8;

        r14 = r5;

        r9 = staticinvoke <Hbc.GlobalObject: Hbc.GlobalObject.Error.JavaScript.FunctionOutput Error(JavaScript.Object,JavaScript.Object)>(r15, r14);

        r10 = staticinvoke <Hbc.Opcode: JavaScript.SelectObject SelectObject(JavaScript.Object,JavaScript.Object)>(r8, r9);

        throw r10;

     label2:
        Catch := @caughtexception;

        r7 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r2, 3, "console");

        r8 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console.log hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r7, 4, "log");

        r15 = r7;

        r14 = r4;

        r9 = staticinvoke <Hbc.GlobalObject.console: Hbc.GlobalObject.console.log.JavaScript.FunctionOutput log(JavaScript.Object,JavaScript.Object)>(r15, r14);

        r6 = r9;

        throw r1;

     label3:
        Catch := @caughtexception;

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 0, r1);

        r7 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r2, 3, "console");

        r8 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console.error hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r7, 5, "error");

        r9 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_0 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 0);

        r10 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_0.message hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r9, 6, "message");

        r15 = r7;

        r14 = r3;

        r13 = r10;

        r11 = staticinvoke <Hbc.GlobalObject.console: Hbc.GlobalObject.console.error.JavaScript.FunctionOutput error(JavaScript.Object,JavaScript.Object,JavaScript.Object)>(r15, r14, r13);

        r6 = r11;

        r1 = r6;

        return r1;

        catch JavaScript.Exception from label1 to label2 with label2;
        catch JavaScript.Exception from label1 to label3 with label3;
    }
}

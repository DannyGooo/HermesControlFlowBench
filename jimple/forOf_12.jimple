public class HermesByteCode
{

    public static JavaScript.Function.HermesByteCode.global.JavaScript.FunctionOutput global(JavaScript.Object)
    {
        JavaScript.FunctionOutput r5, r15, r18;
        JavaScript.Exception Catch;
        JavaScript.Environment_this.index_1 r14;
        JavaScript.Environment_this r0;
        JavaScript.String r4;
        JavaScript.Undefined r1;
        Hbc.GlobalObject r2;
        JavaScript.IteratorBegin r8, r11, r13;
        JavaScript.Parameter_0 arg0;
        JavaScript.Object 1, r21, r20;
        Hbc.GlobalObject.console.log r16;
        JavaScript.IteratorNext r6, r7, r10;
        JavaScript.Environment.index_1 r9, r12;
        JavaScript.Number_1 r3;
        JavaScript.Environment.index_2 r17;

        arg0 := @parameter0: JavaScript.Parameter_0;

        r0 = staticinvoke <Hbc.Opcode: JavaScript.Environment_this CreateEnvironment()>();

        r1 = staticinvoke <Hbc.Opcode: JavaScript.Undefined LoadConstUndefined()>();

        r2 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject GetGlobalObject()>();

        r3 = staticinvoke <Hbc.Opcode: JavaScript.Number_1 LoadConstUInt8(JavaScript.Number)>(1);

        r4 = staticinvoke <Hbc.Opcode: JavaScript.String LoadConstString(JavaScript.String)>("This string will not be logged.");

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreNPToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 0, r1);

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreNPToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 1, r1);

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreNPToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 2, r1);

        r5 = r1;

        r6 = staticinvoke <Hbc.Opcode: JavaScript.Array NewArrayWithBuffer(JavaScript.Number,JavaScript.Number,JavaScript.Number)>(3, 3, 0);

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 0, r6);

        r7 = staticinvoke <Hbc.Opcode: JavaScript.Environment_this.index_0 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 0);

        r8 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.Symbol hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r2, 1, "Symbol");

        r9 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.Symbol.iterator hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r8, 2, "iterator");

        r10 = staticinvoke <Hbc.Opcode: JavaScript.Environment_this.index_0.GetByVal.Hbc.GlobalObject.Symbol.iterator GetByVal(JavaScript.Object,JavaScript.Object)>(r7, r9);

        r21 = r7;

        r11 = staticinvoke <JavaScript.Environment_this.index_0.GetByVal.Hbc.GlobalObject.Symbol: JavaScript.Environment_this.index_0.GetByVal.Hbc.GlobalObject.Symbol.iterator.JavaScript.FunctionOutput iterator(JavaScript.Object)>(r21);

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 1, r11);

        r12 = staticinvoke <Hbc.Opcode: JavaScript.Environment_this.index_1 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 1);

        r14 = r12;

        r15 = staticinvoke <Hbc.Opcode: JavaScript.IteratorBegin IteratorBegin(JavaScript.Object)>(r14);

        r13 = r15;

     label01:
        r6 = staticinvoke <Hbc.Opcode: JavaScript.IteratorNext IteratorNext(JavaScript.Object,JavaScript.Object)>(r13, r14);

        r7 = r13;

        r8 = staticinvoke <Hbc.Opcode: JavaScript.Boolean StrictEq(JavaScript.Object,JavaScript.Object)>(r7, r1);

        if r8 == 1 goto label06;

     label02:
        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 2, r6);

        r7 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r2, 3, "console");

        r8 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console.log hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r7, 4, "log");

        r9 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_2 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 2);

        r21 = r7;

        r20 = r9;

        r10 = staticinvoke <Hbc.GlobalObject.console: Hbc.GlobalObject.console.log.JavaScript.FunctionOutput log(JavaScript.Object,JavaScript.Object)>(r21, r20);

        r5 = r10;

        r11 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_2 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 2);

        r12 = staticinvoke <Hbc.Opcode: JavaScript.Boolean StrictEq(JavaScript.Object,JavaScript.Object)>(r11, r3);

        if r12 == 1 goto label04;

        r7 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r2, 3, "console");

        r8 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console.log hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r7, 4, "log");

        r21 = r7;

        r20 = r4;

        r9 = staticinvoke <Hbc.GlobalObject.console: Hbc.GlobalObject.console.log.JavaScript.FunctionOutput log(JavaScript.Object,JavaScript.Object)>(r21, r20);

        r5 = r9;

     label03:
        goto label01;

     label04:
        staticinvoke <Hbc.Opcode: JavaScript.IteratorClose IteratorClose(JavaScript.Object,JavaScript.Boolean)>(r13, 0);

        goto label06;

     label05:
        Catch := @caughtexception;

        staticinvoke <Hbc.Opcode: JavaScript.IteratorClose IteratorClose(JavaScript.Object,JavaScript.Boolean)>(r13, 1);

        throw r7;

     label06:
        r7 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_1 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 1);

        r9 = r7;

        r10 = staticinvoke <Hbc.Opcode: JavaScript.IteratorBegin IteratorBegin(JavaScript.Object)>(r9);

        r8 = r10;

     label07:
        r7 = staticinvoke <Hbc.Opcode: JavaScript.IteratorNext IteratorNext(JavaScript.Object,JavaScript.Object)>(r8, r9);

        r10 = r8;

        r11 = staticinvoke <Hbc.Opcode: JavaScript.Boolean StrictEq(JavaScript.Object,JavaScript.Object)>(r10, r1);

        if r11 == 1 goto label11;

     label08:
        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 2, r7);

        r10 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r2, 3, "console");

        r11 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console.log hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r10, 4, "log");

        r12 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_2 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 2);

        r21 = r10;

        r20 = r12;

        r15 = staticinvoke <Hbc.GlobalObject.console: Hbc.GlobalObject.console.log.JavaScript.FunctionOutput log(JavaScript.Object,JavaScript.Object)>(r21, r20);

        r5 = r15;

     label09:
        goto label07;

     label10:
        Catch := @caughtexception;

        staticinvoke <Hbc.Opcode: JavaScript.IteratorClose IteratorClose(JavaScript.Object,JavaScript.Boolean)>(r8, 1);

        throw r10;

     label11:
        r10 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_1 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 1);

        r12 = r10;

        r15 = staticinvoke <Hbc.Opcode: JavaScript.IteratorBegin IteratorBegin(JavaScript.Object)>(r12);

        r11 = r15;

     label12:
        r10 = staticinvoke <Hbc.Opcode: JavaScript.IteratorNext IteratorNext(JavaScript.Object,JavaScript.Object)>(r11, r12);

        r15 = r11;

        r16 = staticinvoke <Hbc.Opcode: JavaScript.Boolean StrictEq(JavaScript.Object,JavaScript.Object)>(r15, r1);

        if r16 == 1 goto label16;

     label13:
        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 2, r10);

        r15 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r2, 3, "console");

        r16 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console.log hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r15, 4, "log");

        r17 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_2 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 2);

        r21 = r15;

        r20 = r17;

        r18 = staticinvoke <Hbc.GlobalObject.console: Hbc.GlobalObject.console.log.JavaScript.FunctionOutput log(JavaScript.Object,JavaScript.Object)>(r21, r20);

        r5 = r18;

     label14:
        goto label12;

     label15:
        Catch := @caughtexception;

        staticinvoke <Hbc.Opcode: JavaScript.IteratorClose IteratorClose(JavaScript.Object,JavaScript.Boolean)>(r11, 1);

        throw r15;

     label16:
        r15 = r5;

        return r15;

        catch JavaScript.Exception from label02 to label03 with label05;
        catch JavaScript.Exception from label08 to label09 with label10;
        catch JavaScript.Exception from label13 to label14 with label15;
    }
}

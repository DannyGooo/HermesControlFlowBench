public class HermesByteCode
{

    public static JavaScript.Function.HermesByteCode.global.JavaScript.FunctionOutput global(JavaScript.Object)
    {
        JavaScript.FunctionOutput r7, r8, r10;
        JavaScript.Parameter_0 arg0;
        JavaScript.Object r14, r13;
        JavaScript.String r3, r4, r5, r6;
        JavaScript.Boolean r2, r11;
        Hbc.GlobalObject.console.log r9;
        JavaScript.Undefined r0;
        Hbc.GlobalObject r1;

        arg0 := @parameter0: JavaScript.Parameter_0;

        r0 = staticinvoke <Hbc.Opcode: JavaScript.Environment_this CreateEnvironment()>();

        r0 = staticinvoke <Hbc.Opcode: JavaScript.Undefined LoadConstUndefined()>();

        r1 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject GetGlobalObject()>();

        r2 = staticinvoke <Hbc.Opcode: JavaScript.Boolean LoadConstTrue()>();

        r3 = staticinvoke <Hbc.Opcode: JavaScript.String LoadConstString(JavaScript.String)>("This shape is a square.");

        r4 = staticinvoke <Hbc.Opcode: JavaScript.String LoadConstString(JavaScript.String)>("This shape is a rectangle.");

        r5 = staticinvoke <Hbc.Opcode: JavaScript.String LoadConstString(JavaScript.String)>("This shape is a quadrilateral.");

        r6 = staticinvoke <Hbc.Opcode: JavaScript.String LoadConstString(JavaScript.String)>("This shape is a circle.");

        r7 = r0;

        r8 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.isSquare hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 1, "isSquare");

        r9 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.shape hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 2, "shape");

        r14 = r0;

        r13 = r9;

        r10 = staticinvoke <Hbc.GlobalObject: Hbc.GlobalObject.isSquare.JavaScript.FunctionOutput isSquare(JavaScript.Object,JavaScript.Object)>(r14, r13);

        r11 = staticinvoke <Hbc.Opcode: JavaScript.Boolean StrictEq(JavaScript.Object,JavaScript.Object)>(r10, r2);

        if r11 == 1 goto label2;

        r8 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.isRectangle hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 3, "isRectangle");

        r9 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.shape hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 2, "shape");

        r14 = r0;

        r13 = r9;

        r10 = staticinvoke <Hbc.GlobalObject: Hbc.GlobalObject.isRectangle.JavaScript.FunctionOutput isRectangle(JavaScript.Object,JavaScript.Object)>(r14, r13);

        r11 = staticinvoke <Hbc.Opcode: JavaScript.Boolean StrictEq(JavaScript.Object,JavaScript.Object)>(r10, r2);

        if r11 == 1 goto label3;

        r8 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.isQuadrilateral hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 4, "isQuadrilateral");

        r9 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.shape hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 2, "shape");

        r14 = r0;

        r13 = r9;

        r10 = staticinvoke <Hbc.GlobalObject: Hbc.GlobalObject.isQuadrilateral.JavaScript.FunctionOutput isQuadrilateral(JavaScript.Object,JavaScript.Object)>(r14, r13);

        r11 = staticinvoke <Hbc.Opcode: JavaScript.Boolean StrictEq(JavaScript.Object,JavaScript.Object)>(r10, r2);

        if r11 == 1 goto label4;

        r8 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.isCircle hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 5, "isCircle");

        r9 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.shape hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 2, "shape");

        r14 = r0;

        r13 = r9;

        r10 = staticinvoke <Hbc.GlobalObject: Hbc.GlobalObject.isCircle.JavaScript.FunctionOutput isCircle(JavaScript.Object,JavaScript.Object)>(r14, r13);

        r11 = staticinvoke <Hbc.Opcode: JavaScript.Boolean StrictEq(JavaScript.Object,JavaScript.Object)>(r10, r2);

        if r11 == 1 goto label1;

        goto label5;

     label1:
        r8 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 6, "console");

        r9 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console.log hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r8, 7, "log");

        r14 = r8;

        r13 = r6;

        r10 = staticinvoke <Hbc.GlobalObject.console: Hbc.GlobalObject.console.log.JavaScript.FunctionOutput log(JavaScript.Object,JavaScript.Object)>(r14, r13);

        r7 = r10;

        goto label5;

     label2:
        r8 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 6, "console");

        r9 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console.log hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r8, 7, "log");

        r14 = r8;

        r13 = r3;

        r10 = staticinvoke <Hbc.GlobalObject.console: Hbc.GlobalObject.console.log.JavaScript.FunctionOutput log(JavaScript.Object,JavaScript.Object)>(r14, r13);

        r7 = r10;

     label3:
        r8 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 6, "console");

        r9 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console.log hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r8, 7, "log");

        r14 = r8;

        r13 = r4;

        r10 = staticinvoke <Hbc.GlobalObject.console: Hbc.GlobalObject.console.log.JavaScript.FunctionOutput log(JavaScript.Object,JavaScript.Object)>(r14, r13);

        r7 = r10;

     label4:
        r8 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 6, "console");

        r9 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console.log hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r8, 7, "log");

        r14 = r8;

        r13 = r5;

        r10 = staticinvoke <Hbc.GlobalObject.console: Hbc.GlobalObject.console.log.JavaScript.FunctionOutput log(JavaScript.Object,JavaScript.Object)>(r14, r13);

        r7 = r10;

     label5:
        r8 = r7;

        return r8;
    }
}

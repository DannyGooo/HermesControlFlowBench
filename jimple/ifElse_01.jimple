public class HermesByteCode
{

    public static JavaScript.Function.HermesByteCode.global.JavaScript.FunctionOutput global(JavaScript.Object)
    {
        Hbc.GlobalObject.x r6;
        JavaScript.Parameter_0 arg0;
        JavaScript.Object 1;
        JavaScript.Number r0, r3, r5, r7, r8;
        JavaScript.Number_1 r2;
        Hbc.GlobalObject r1;
        Hbc.GlobalObject.toChar r4;

        arg0 := @parameter0: JavaScript.Parameter_0;

        r0 = staticinvoke <Hbc.Opcode: JavaScript.Environment_this CreateEnvironment()>();

        r0 = staticinvoke <Hbc.Opcode: JavaScript.Undefined LoadConstUndefined()>();

        r1 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject GetGlobalObject()>();

        r2 = staticinvoke <Hbc.Opcode: JavaScript.Number_1 LoadConstUInt8(JavaScript.Number)>(1);

        r3 = r0;

        r4 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.cipherChar hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 1, "cipherChar");

        r5 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.fromChar hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 2, "fromChar");

        r6 = staticinvoke <Hbc.Opcode: JavaScript.Boolean StrictEq(JavaScript.Object,JavaScript.Object)>(r4, r5);

        if r6 == 1 goto label1;

        r0 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.result hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 3, "result");

        r4 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.clearChar hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 4, "clearChar");

        r5 = staticinvoke <Hbc.Opcode: JavaScript.Number Add(JavaScript.Object,JavaScript.Object)>(r0, r4);

        staticinvoke <Hbc.Opcode: void PutById(JavaScript.Object,JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, r5, 1, "result");

        r3 = r5;

        goto label2;

     label1:
        r0 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.result hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 3, "result");

        r4 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.toChar hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 5, "toChar");

        r5 = staticinvoke <Hbc.Opcode: JavaScript.Number Add(JavaScript.Object,JavaScript.Object)>(r0, r4);

        staticinvoke <Hbc.Opcode: void PutById(JavaScript.Object,JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, r5, 1, "result");

        r3 = r5;

        r6 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.x hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 6, "x");

        r7 = staticinvoke <Hbc.Opcode: JavaScript.Number ToNumber(JavaScript.Object)>(r6);

        r8 = staticinvoke <Hbc.Opcode: JavaScript.Number AddN(JavaScript.Object,JavaScript.Object)>(r7, r2);

        staticinvoke <Hbc.Opcode: void PutById(JavaScript.Object,JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, r8, 2, "x");

        r3 = r7;

     label2:
        r0 = r3;

        return r0;
    }
}

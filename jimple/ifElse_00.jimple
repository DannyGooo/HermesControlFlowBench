public class HermesByteCode
{

    public static JavaScript.Function.HermesByteCode.global.JavaScript.FunctionOutput global(JavaScript.Object)
    {
        JavaScript.Number_5 r3;
        JavaScript.FunctionOutput r5, r10, r11, r12;
        JavaScript.Environment_this r0;
        JavaScript.Function.HermesByteCode.testNum r4;
        JavaScript.Undefined r2;
        Hbc.GlobalObject r1;
        JavaScript.Negate r9;
        Hbc.GlobalObject.console r6;
        JavaScript.Parameter_0 arg0;
        JavaScript.Object 5, r15, r14;
        Hbc.GlobalObject.console.log r7;
        Hbc.GlobalObject.testNum r8;

        arg0 := @parameter0: JavaScript.Parameter_0;

        staticinvoke <Hbc.Opcode: void declareGlobalVar(JavaScript.Object)>("testNum");

        r0 = staticinvoke <Hbc.Opcode: JavaScript.Environment_this CreateEnvironment()>();

        r1 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject GetGlobalObject()>();

        r2 = staticinvoke <Hbc.Opcode: JavaScript.Undefined LoadConstUndefined()>();

        r3 = staticinvoke <Hbc.Opcode: JavaScript.Number_5 LoadConstUInt8(JavaScript.Number)>(5);

        r4 = staticinvoke <Hbc.Opcode: JavaScript.Function.HermesByteCode.testNum CreateClosure(JavaScript.Environment,int)>(r0, 1);

        staticinvoke <Hbc.Opcode: void PutById(JavaScript.Object,JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, r4, 1, "testNum");

        r5 = r2;

        r6 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 1, "console");

        r7 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console.log hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r6, 2, "log");

        r8 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.testNum hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 3, "testNum");

        r9 = staticinvoke <Hbc.Opcode: JavaScript.Negate Negate(JavaScript.Object)>(r3);

        r15 = r2;

        r14 = r9;

        r10 = staticinvoke <Hbc.GlobalObject: Hbc.GlobalObject.testNum.JavaScript.FunctionOutput testNum(JavaScript.Object,JavaScript.Object)>(r15, r14);

        r15 = r6;

        r14 = r10;

        r11 = staticinvoke <Hbc.GlobalObject.console: Hbc.GlobalObject.console.log.JavaScript.FunctionOutput log(JavaScript.Object,JavaScript.Object)>(r15, r14);

        r5 = r11;

        r12 = r5;

        return r12;
    }

    public static JavaScript.Function.HermesByteCode.testNum.JavaScript.FunctionOutput testNum(JavaScript.Object, JavaScript.Object)
    {
        JavaScript.Parameter_1 arg1;
        JavaScript.Parameter_0 arg0;
        JavaScript.Environment_this.index_1 r6;
        JavaScript.Environment_this r0;
        JavaScript.String r4, r5;
        JavaScript.Environment.index_0 r1;
        JavaScript.Boolean r7;
        JavaScript.Undefined r2;
        JavaScript.Number_0 r3;

        arg0 := @parameter0: JavaScript.Parameter_0;

        arg1 := @parameter1: JavaScript.Parameter_1;

        r0 = staticinvoke <Hbc.Opcode: JavaScript.Environment_this CreateEnvironment()>();

        r1 = arg1;

        r2 = staticinvoke <Hbc.Opcode: JavaScript.Undefined LoadConstUndefined()>();

        r3 = staticinvoke <Hbc.Opcode: JavaScript.Number_0 LoadConstZero()>();

        r4 = staticinvoke <Hbc.Opcode: JavaScript.String LoadConstString(JavaScript.String)>("positive");

        r5 = staticinvoke <Hbc.Opcode: JavaScript.String LoadConstString(JavaScript.String)>("NOT positive");

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreNPToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 0, r2);

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 1, r1);

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreNPToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 0, r2);

        r6 = staticinvoke <Hbc.Opcode: JavaScript.Environment_this.index_1 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 1);

        r7 = staticinvoke <Hbc.Opcode: JavaScript.Boolean Greater(JavaScript.Object,JavaScript.Object)>(r6, r3);

        if r7 == 1 goto label1;

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 0, r5);

        goto label2;

     label1:
        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 0, r4);

     label2:
        r1 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_0 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 0);

        return r1;
    }
}

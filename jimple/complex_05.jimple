public class HermesByteCode
{

    public static JavaScript.Function.HermesByteCode.global.JavaScript.FunctionOutput global(JavaScript.Object)
    {
        JavaScript.FunctionOutput r7, r8, r16;
        JavaScript.Exception Catch;
        JavaScript.Environment_this r0;
        JavaScript.Number r12, r13;
        JavaScript.String r6;
        JavaScript.Object.GetByVal.JavaScript.Property r15;
        JavaScript.Boolean r10;
        JavaScript.Undefined r1;
        Hbc.GlobalObject r2;
        JavaScript.Parameter_0 arg0;
        JavaScript.Object 1, 3, r20, r19, r18;
        JavaScript.Number_0 r3;
        JavaScript.Number_1 r4;
        JavaScript.Environment.index_2 r9, r11, r14;
        JavaScript.Number_3 r5;

        arg0 := @parameter0: JavaScript.Parameter_0;

        staticinvoke <Hbc.Opcode: void declareGlobalVar(JavaScript.Object)>("getRectArea");

        r0 = staticinvoke <Hbc.Opcode: JavaScript.Environment_this CreateEnvironment()>();

        r1 = staticinvoke <Hbc.Opcode: JavaScript.Undefined LoadConstUndefined()>();

        r2 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject GetGlobalObject()>();

        r3 = staticinvoke <Hbc.Opcode: JavaScript.Number_0 LoadConstZero()>();

        r4 = staticinvoke <Hbc.Opcode: JavaScript.Number_1 LoadConstUInt8(JavaScript.Number)>(1);

        r5 = staticinvoke <Hbc.Opcode: JavaScript.Number_3 LoadConstUInt8(JavaScript.Number)>(3);

        r6 = staticinvoke <Hbc.Opcode: JavaScript.String LoadConstString(JavaScript.String)>("A");

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreNPToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 0, r1);

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreNPToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 1, r1);

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreNPToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 2, r1);

        r7 = staticinvoke <Hbc.Opcode: JavaScript.Function.HermesByteCode.getRectArea CreateClosure(JavaScript.Environment,int)>(r0, 1);

        staticinvoke <Hbc.Opcode: void PutById(JavaScript.Object,JavaScript.Object,JavaScript.Number,JavaScript.String)>(r2, r7, 1, "getRectArea");

        r8 = r1;

        r9 = staticinvoke <Hbc.Opcode: JavaScript.Array NewArrayWithBuffer(JavaScript.Number,JavaScript.Number,JavaScript.Number)>(6, 6, 0);

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 0, r9);

     label1:
        r7 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.getRectArea hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r2, 1, "getRectArea");

        r20 = r1;

        r19 = r5;

        r18 = r6;

        r9 = staticinvoke <Hbc.GlobalObject: Hbc.GlobalObject.getRectArea.JavaScript.FunctionOutput getRectArea(JavaScript.Object,JavaScript.Object,JavaScript.Object)>(r20, r19, r18);

        r8 = r9;

     label2:
        goto label5;

     label3:
        Catch := @caughtexception;

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 3, r7);

        r9 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r2, 2, "console");

        r10 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console.error hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r9, 3, "error");

        r11 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_3 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 3);

        r20 = r9;

        r19 = r11;

        r12 = staticinvoke <Hbc.GlobalObject.console: Hbc.GlobalObject.console.error.JavaScript.FunctionOutput error(JavaScript.Object,JavaScript.Object)>(r20, r19);

        r8 = r12;

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreNPToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 1, r3);

        r13 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_0 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 0);

        r14 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_0.length hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r13, 4, "length");

        r15 = staticinvoke <Hbc.Opcode: JavaScript.Number Sub(JavaScript.Object,JavaScript.Object)>(r14, r4);

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 2, r15);

        r7 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_1 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 1);

        r9 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_2 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 2);

        r10 = staticinvoke <Hbc.Opcode: JavaScript.Boolean Less(JavaScript.Object,JavaScript.Object)>(r7, r9);

        if r10 == 0 goto label5;

     label4:
        r7 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r2, 2, "console");

        r9 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console.log hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r7, 5, "log");

        r10 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_0 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 0);

        r11 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_1 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 1);

        r12 = staticinvoke <Hbc.Opcode: JavaScript.Object.GetByVal.JavaScript.Property GetByVal(JavaScript.Object,JavaScript.Object)>(r10, r11);

        r13 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_0 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 0);

        r14 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_2 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 2);

        r15 = staticinvoke <Hbc.Opcode: JavaScript.Object.GetByVal.JavaScript.Property GetByVal(JavaScript.Object,JavaScript.Object)>(r13, r14);

        r20 = r7;

        r19 = r12;

        r18 = r15;

        r16 = staticinvoke <Hbc.GlobalObject.console: Hbc.GlobalObject.console.log.JavaScript.FunctionOutput log(JavaScript.Object,JavaScript.Object,JavaScript.Object)>(r20, r19, r18);

        r8 = r16;

        r7 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_1 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 1);

        r9 = staticinvoke <Hbc.Opcode: JavaScript.Number ToNumber(JavaScript.Object)>(r7);

        r10 = staticinvoke <Hbc.Opcode: JavaScript.Number AddN(JavaScript.Object,JavaScript.Object)>(r9, r4);

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 1, r10);

        r11 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_2 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 2);

        r12 = staticinvoke <Hbc.Opcode: JavaScript.Number ToNumber(JavaScript.Object)>(r11);

        r13 = staticinvoke <Hbc.Opcode: JavaScript.Number SubN(JavaScript.Object,JavaScript.Object)>(r12, r4);

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 2, r13);

        r7 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_1 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 1);

        r9 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_2 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 2);

        r10 = staticinvoke <Hbc.Opcode: JavaScript.Boolean Less(JavaScript.Object,JavaScript.Object)>(r7, r9);

        if r10 == 1 goto label4;

     label5:
        r7 = r8;

        return r7;

        catch JavaScript.Exception from label1 to label2 with label3;
    }

    public static JavaScript.Function.HermesByteCode.getRectArea.JavaScript.FunctionOutput getRectArea(JavaScript.Object, JavaScript.Object, JavaScript.Object)
    {
        JavaScript.CreateThis r6;
        JavaScript.FunctionOutput r7;
        JavaScript.SelectObject r8;
        JavaScript.Parameter_1 arg1;
        JavaScript.Parameter_2 arg2;
        Hbc.GlobalObject.Error.prototype r2;
        JavaScript.Parameter_0 arg0;
        JavaScript.Environment_this r0;
        JavaScript.Object r11, r10;
        JavaScript.String r5;
        JavaScript.Undefined r4;
        Hbc.GlobalObject.Error r1;
        Hbc.GlobalObject r3;

        arg0 := @parameter0: JavaScript.Parameter_0;

        arg1 := @parameter1: JavaScript.Parameter_1;

        arg2 := @parameter2: JavaScript.Parameter_2;

        r0 = staticinvoke <Hbc.Opcode: JavaScript.Environment_this CreateEnvironment()>();

        r1 = arg1;

        r2 = arg2;

        r3 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject GetGlobalObject()>();

        r4 = staticinvoke <Hbc.Opcode: JavaScript.Undefined LoadConstUndefined()>();

        r5 = staticinvoke <Hbc.Opcode: JavaScript.String LoadConstString(JavaScript.String)>("Parameter is not a number!");

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 0, r1);

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 1, r2);

        r6 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.isNaN hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r3, 1, "isNaN");

        r7 = staticinvoke <Hbc.Opcode: JavaScript.Environment_this.index_0 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 0);

        r11 = r4;

        r10 = r7;

        r8 = staticinvoke <Hbc.GlobalObject: Hbc.GlobalObject.isNaN.JavaScript.FunctionOutput isNaN(JavaScript.Object,JavaScript.Object)>(r11, r10);

        if r8 == 1 goto label1;

        r1 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.isNaN hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r3, 1, "isNaN");

        r2 = staticinvoke <Hbc.Opcode: JavaScript.Environment_this.index_1 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 1);

        r11 = r4;

        r10 = r2;

        r6 = staticinvoke <Hbc.GlobalObject: Hbc.GlobalObject.isNaN.JavaScript.FunctionOutput isNaN(JavaScript.Object,JavaScript.Object)>(r11, r10);

        if r6 == 1 goto label1;

        return r4;

     label1:
        r1 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.Error hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r3, 2, "Error");

        r2 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.Error.prototype hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 3, "prototype");

        r6 = staticinvoke <Hbc.Opcode: JavaScript.CreateThis CreateThis(JavaScript.Object,JavaScript.Object)>(r2, r1);

        r11 = r6;

        r10 = r5;

        r7 = staticinvoke <Hbc.GlobalObject: Hbc.GlobalObject.Error.JavaScript.FunctionOutput Error(JavaScript.Object,JavaScript.Object)>(r11, r10);

        r8 = staticinvoke <Hbc.Opcode: JavaScript.SelectObject SelectObject(JavaScript.Object,JavaScript.Object)>(r6, r7);

        throw r8;
    }
}

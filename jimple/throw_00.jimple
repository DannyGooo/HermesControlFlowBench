public class HermesByteCode
{

    public static JavaScript.Function.HermesByteCode.global.JavaScript.FunctionOutput global(JavaScript.Object)
    {
        JavaScript.FunctionOutput r5, r6, r10;
        JavaScript.Exception Catch;
        JavaScript.Environment_this r0;
        JavaScript.String r4;
        JavaScript.Undefined r2;
        Hbc.GlobalObject r1;
        Hbc.GlobalObject.console.error r8;
        Hbc.GlobalObject.console r7;
        JavaScript.Parameter_0 arg0;
        JavaScript.Object 3, r14, r13, r12;
        JavaScript.Environment.index_0 r9;
        JavaScript.Number_3 r3;

        arg0 := @parameter0: JavaScript.Parameter_0;

        staticinvoke <Hbc.Opcode: void declareGlobalVar(JavaScript.Object)>("getRectArea");

        r0 = staticinvoke <Hbc.Opcode: JavaScript.Environment_this CreateEnvironment()>();

        r1 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject GetGlobalObject()>();

        r2 = staticinvoke <Hbc.Opcode: JavaScript.Undefined LoadConstUndefined()>();

        r3 = staticinvoke <Hbc.Opcode: JavaScript.Number_3 LoadConstUInt8(JavaScript.Number)>(3);

        r4 = staticinvoke <Hbc.Opcode: JavaScript.String LoadConstString(JavaScript.String)>("A");

        r5 = staticinvoke <Hbc.Opcode: JavaScript.Function.HermesByteCode.getRectArea CreateClosure(JavaScript.Environment,int)>(r0, 1);

        staticinvoke <Hbc.Opcode: void PutById(JavaScript.Object,JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, r5, 1, "getRectArea");

        r6 = r2;

     label1:
        r5 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.getRectArea hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 1, "getRectArea");

        r14 = r2;

        r13 = r3;

        r12 = r4;

        r7 = staticinvoke <Hbc.GlobalObject: Hbc.GlobalObject.getRectArea.JavaScript.FunctionOutput getRectArea(JavaScript.Object,JavaScript.Object,JavaScript.Object)>(r14, r13, r12);

        r6 = r7;

     label2:
        goto label4;

     label3:
        Catch := @caughtexception;

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 0, r5);

        r7 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 2, "console");

        r8 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console.error hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r7, 3, "error");

        r9 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_0 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 0);

        r14 = r7;

        r13 = r9;

        r10 = staticinvoke <Hbc.GlobalObject.console: Hbc.GlobalObject.console.error.JavaScript.FunctionOutput error(JavaScript.Object,JavaScript.Object)>(r14, r13);

        r6 = r10;

     label4:
        r5 = r6;

        return r5;

        catch JavaScript.Exception from label1 to label2 with label3;
    }

    public static JavaScript.Function.HermesByteCode.getRectArea.JavaScript.FunctionOutput getRectArea(JavaScript.Object, JavaScript.Object, JavaScript.Object)
    {
        JavaScript.CreateThis r6;
        JavaScript.FunctionOutput r7;
        JavaScript.SelectObject r8;
        JavaScript.Parameter_1 arg1;
        JavaScript.Parameter_2 arg2;
        Hbc.GlobalObject.Error.prototype r2;
        JavaScript.Parameter_0 arg0;
        JavaScript.Environment_this r0;
        JavaScript.Object r11, r10;
        JavaScript.String r5;
        JavaScript.Undefined r4;
        Hbc.GlobalObject.Error r1;
        Hbc.GlobalObject r3;

        arg0 := @parameter0: JavaScript.Parameter_0;

        arg1 := @parameter1: JavaScript.Parameter_1;

        arg2 := @parameter2: JavaScript.Parameter_2;

        r0 = staticinvoke <Hbc.Opcode: JavaScript.Environment_this CreateEnvironment()>();

        r1 = arg1;

        r2 = arg2;

        r3 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject GetGlobalObject()>();

        r4 = staticinvoke <Hbc.Opcode: JavaScript.Undefined LoadConstUndefined()>();

        r5 = staticinvoke <Hbc.Opcode: JavaScript.String LoadConstString(JavaScript.String)>("Parameter is not a number!");

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 0, r1);

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 1, r2);

        r6 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.isNaN hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r3, 1, "isNaN");

        r7 = staticinvoke <Hbc.Opcode: JavaScript.Environment_this.index_0 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 0);

        r11 = r4;

        r10 = r7;

        r8 = staticinvoke <Hbc.GlobalObject: Hbc.GlobalObject.isNaN.JavaScript.FunctionOutput isNaN(JavaScript.Object,JavaScript.Object)>(r11, r10);

        if r8 == 1 goto label1;

        r1 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.isNaN hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r3, 1, "isNaN");

        r2 = staticinvoke <Hbc.Opcode: JavaScript.Environment_this.index_1 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 1);

        r11 = r4;

        r10 = r2;

        r6 = staticinvoke <Hbc.GlobalObject: Hbc.GlobalObject.isNaN.JavaScript.FunctionOutput isNaN(JavaScript.Object,JavaScript.Object)>(r11, r10);

        if r6 == 1 goto label1;

        return r4;

     label1:
        r1 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.Error hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r3, 2, "Error");

        r2 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.Error.prototype hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r1, 3, "prototype");

        r6 = staticinvoke <Hbc.Opcode: JavaScript.CreateThis CreateThis(JavaScript.Object,JavaScript.Object)>(r2, r1);

        r11 = r6;

        r10 = r5;

        r7 = staticinvoke <Hbc.GlobalObject: Hbc.GlobalObject.Error.JavaScript.FunctionOutput Error(JavaScript.Object,JavaScript.Object)>(r11, r10);

        r8 = staticinvoke <Hbc.Opcode: JavaScript.SelectObject SelectObject(JavaScript.Object,JavaScript.Object)>(r6, r7);

        throw r8;
    }
}

public class HermesByteCode
{

    public static JavaScript.Function.HermesByteCode.global.JavaScript.FunctionOutput global(JavaScript.Object)
    {
        JavaScript.FunctionOutput r6, r7;
        Hbc.GlobalObject.RangeError r9;
        JavaScript.Number_9 r4;
        JavaScript.Exception Catch;
        JavaScript.Environment_this r0;
        JavaScript.Boolean r10;
        JavaScript.Undefined r1;
        Hbc.GlobalObject r2;
        JavaScript.Parameter_0 arg0;
        JavaScript.Object 9, 1, r13, r12;
        JavaScript.Number_0 r3;
        JavaScript.Environment.index_1 r8;
        JavaScript.Number_1 r5;

        arg0 := @parameter0: JavaScript.Parameter_0;

        r0 = staticinvoke <Hbc.Opcode: JavaScript.Environment_this CreateEnvironment()>();

        r1 = staticinvoke <Hbc.Opcode: JavaScript.Undefined LoadConstUndefined()>();

        r2 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject GetGlobalObject()>();

        r3 = staticinvoke <Hbc.Opcode: JavaScript.Number_0 LoadConstZero()>();

        r4 = staticinvoke <Hbc.Opcode: JavaScript.Number_9 LoadConstUInt8(JavaScript.Number)>(9);

        r5 = staticinvoke <Hbc.Opcode: JavaScript.Number_1 LoadConstUInt8(JavaScript.Number)>(1);

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreNPToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 0, r1);

        r6 = r1;

     label1:
        r7 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.myRoutine hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r2, 1, "myRoutine");

        r13 = r1;

        r8 = staticinvoke <Hbc.GlobalObject: Hbc.GlobalObject.myRoutine.JavaScript.FunctionOutput myRoutine(JavaScript.Object)>(r13);

        r6 = r8;

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreNPToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 0, r3);

        r7 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_0 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 0);

        r8 = staticinvoke <Hbc.Opcode: JavaScript.Boolean Less(JavaScript.Object,JavaScript.Object)>(r7, r4);

        if r8 == 0 goto label3;

     label2:
        r7 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r2, 2, "console");

        r8 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.console.log hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r7, 3, "log");

        r9 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_0 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 0);

        r13 = r7;

        r12 = r9;

        r10 = staticinvoke <Hbc.GlobalObject.console: Hbc.GlobalObject.console.log.JavaScript.FunctionOutput log(JavaScript.Object,JavaScript.Object)>(r13, r12);

        r6 = r10;

        r7 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_0 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 0);

        r8 = staticinvoke <Hbc.Opcode: JavaScript.Number ToNumber(JavaScript.Object)>(r7);

        r9 = staticinvoke <Hbc.Opcode: JavaScript.Number AddN(JavaScript.Object,JavaScript.Object)>(r8, r5);

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 0, r9);

        r7 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_0 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 0);

        r8 = staticinvoke <Hbc.Opcode: JavaScript.Boolean Less(JavaScript.Object,JavaScript.Object)>(r7, r4);

        if r8 == 1 goto label2;

     label3:
        goto label5;

     label4:
        Catch := @caughtexception;

        staticinvoke <Hbc.Opcode: JavaScript.Environment StoreToEnvironment(JavaScript.Environment,int,JavaScript.Object)>(r0, 1, r7);

        r8 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_1 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 1);

        r9 = staticinvoke <Hbc.Opcode: Hbc.GlobalObject.RangeError hbcGet(JavaScript.Object,JavaScript.Number,JavaScript.String)>(r2, 4, "RangeError");

        r10 = staticinvoke <Hbc.Opcode: JavaScript.Boolean InstanceOf(JavaScript.Object,JavaScript.Object)>(r8, r9);

        if r10 == 1 goto label5;

        r7 = staticinvoke <Hbc.Opcode: JavaScript.Environment.index_1 LoadFromEnvironment(JavaScript.Object,JavaScript.Number)>(r0, 1);

        throw r7;

     label5:
        r7 = r6;

        return r7;

        catch JavaScript.Exception from label1 to label3 with label4;
    }
}
